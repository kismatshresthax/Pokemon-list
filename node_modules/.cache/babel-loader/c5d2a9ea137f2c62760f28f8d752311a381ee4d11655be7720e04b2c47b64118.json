{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ganes\\\\OneDrive\\\\Desktop\\\\New folder (12)\\\\my-app\\\\src\\\\context\\\\PokemonProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useForm } from '../hook/useForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PokemonContext = /*#__PURE__*/createContext();\nexport const PokemonProvider = ({\n  children\n}) => {\n  _s();\n  const [allPokemons, setAllPokemons] = useState([]);\n  const [globalPokemons, setGlobalPokemons] = useState([]);\n  const [offset, setOffset] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [filteredPokemons, setFilteredPokemons] = useState([]);\n  const {\n    valueSearch,\n    onInputChange,\n    onResetForm\n  } = useForm({\n    valueSearch: ''\n  });\n  const baseURL = 'https://pokeapi.co/api/v2/';\n  const fetchPokemonData = async url => {\n    const res = await fetch(url);\n    if (!res.ok) throw new Error(`Failed to fetch. Status: ${res.status}`);\n    return res.json();\n  };\n  const getAllPokemons = async (limit = 50) => {\n    try {\n      const data = await fetchPokemonData(`${baseURL}pokemon?limit=${limit}&offset=${offset}`);\n      const results = await Promise.all(data.results.map(pokemon => fetchPokemonData(pokemon.url)));\n      setAllPokemons(prev => [...prev, ...results]);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching Pokemon list:', error);\n      setLoading(false);\n    }\n  };\n  const getGlobalPokemons = async () => {\n    try {\n      const data = await fetchPokemonData(`${baseURL}pokemon?limit=100000&offset=0`);\n      const results = await Promise.all(data.results.map(pokemon => fetchPokemonData(pokemon.url)));\n      setGlobalPokemons(results);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching global pokemons:', error);\n      setLoading(false);\n    }\n  };\n  const getPokemonByID = async id => {\n    return fetchPokemonData(`${baseURL}pokemon/${id}`);\n  };\n  useEffect(() => {\n    getAllPokemons();\n  }, [offset]);\n  useEffect(() => {\n    getGlobalPokemons();\n  }, []);\n  const onClickLoadMore = () => {\n    setOffset(prev => prev + 50);\n  };\n  return /*#__PURE__*/_jsxDEV(PokemonContext.Provider, {\n    value: {\n      valueSearch,\n      onInputChange,\n      onResetForm,\n      allPokemons,\n      globalPokemons,\n      getPokemonByID,\n      onClickLoadMore,\n      loading,\n      setLoading,\n      filteredPokemons,\n      setFilteredPokemons\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(PokemonProvider, \"zcK4NHuMW0t7QnJAofLiDPtad2c=\", false, function () {\n  return [useForm];\n});\n_c = PokemonProvider;\nvar _c;\n$RefreshReg$(_c, \"PokemonProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","useForm","jsxDEV","_jsxDEV","PokemonContext","PokemonProvider","children","_s","allPokemons","setAllPokemons","globalPokemons","setGlobalPokemons","offset","setOffset","loading","setLoading","filteredPokemons","setFilteredPokemons","valueSearch","onInputChange","onResetForm","baseURL","fetchPokemonData","url","res","fetch","ok","Error","status","json","getAllPokemons","limit","data","results","Promise","all","map","pokemon","prev","error","console","getGlobalPokemons","getPokemonByID","id","onClickLoadMore","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ganes/OneDrive/Desktop/New folder (12)/my-app/src/context/PokemonProvider.jsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\r\nimport { useForm } from '../hook/useForm';\r\n\r\nexport const PokemonContext = createContext();\r\n\r\nexport const PokemonProvider = ({ children }) => {\r\n  const [allPokemons, setAllPokemons] = useState([]);\r\n  const [globalPokemons, setGlobalPokemons] = useState([]);\r\n  const [offset, setOffset] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [filteredPokemons, setFilteredPokemons] = useState([]);\r\n  const { valueSearch, onInputChange, onResetForm } = useForm({ valueSearch: '' });\r\n\r\n  const baseURL = 'https://pokeapi.co/api/v2/';\r\n\r\n  const fetchPokemonData = async (url) => {\r\n    const res = await fetch(url);\r\n    if (!res.ok) throw new Error(`Failed to fetch. Status: ${res.status}`);\r\n    return res.json();\r\n  };\r\n\r\n  const getAllPokemons = async (limit = 50) => {\r\n    try {\r\n      const data = await fetchPokemonData(`${baseURL}pokemon?limit=${limit}&offset=${offset}`);\r\n      const results = await Promise.all(data.results.map(pokemon => fetchPokemonData(pokemon.url)));\r\n      setAllPokemons(prev => [...prev, ...results]);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching Pokemon list:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getGlobalPokemons = async () => {\r\n    try {\r\n      const data = await fetchPokemonData(`${baseURL}pokemon?limit=100000&offset=0`);\r\n      const results = await Promise.all(data.results.map(pokemon => fetchPokemonData(pokemon.url)));\r\n      setGlobalPokemons(results);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching global pokemons:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPokemonByID = async (id) => {\r\n    return fetchPokemonData(`${baseURL}pokemon/${id}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllPokemons();\r\n  }, [offset]);\r\n\r\n  useEffect(() => {\r\n    getGlobalPokemons();\r\n  }, []);\r\n\r\n  const onClickLoadMore = () => {\r\n    setOffset(prev => prev + 50);\r\n  };\r\n\r\n  return (\r\n    <PokemonContext.Provider\r\n      value={{\r\n        valueSearch,\r\n        onInputChange,\r\n        onResetForm,\r\n        allPokemons,\r\n        globalPokemons,\r\n        getPokemonByID,\r\n        onClickLoadMore,\r\n        loading,\r\n        setLoading,\r\n        filteredPokemons,\r\n        setFilteredPokemons,\r\n      }}\r\n    >\r\n      {children}\r\n    </PokemonContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}